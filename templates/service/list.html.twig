{% extends 'base.html.twig' %}

{% block title %}{{ type }} √† Rouen{% endblock %}

{% block body %}
<div class="container mt-4">
    <h1 class="text-center mb-4">{{ type }} √† Rouen</h1>

    <div class="mt-3">
        <button type="button" class="btn btn-outline-dark" onclick="history.back()">‚¨Ö Revenir √† la page
            pr√©c√©dente</button>
    </div>
    <br>

    <!-- "Ma Position" Button -->
    <button id="find-me-btn" class="btn btn-primary mb-4">üìç Ma position</button>

    <!-- Map Container -->
    <div id="map" class="rounded shadow-sm" style="height: 500px; margin-bottom: 20px;"></div>

    <!-- List of Places -->
    <div class="table-responsive">
        <table class="table table-striped table-bordered">
            <tbody>
                {% if places is empty %}
                <tr>
                    <td colspan="6" class="text-center">No {{ type|lower }} found.</td>
                </tr>
                {% else %}
                {% for place in places %}
                <tr>
                    <td><a class="list-places-a" href="/place/{{ place.id }}">{{ place.name }}</a></td>
                </tr>
                {% endfor %}
                {% endif %}
            </tbody>
        </table>
    </div>
</div>

<!-- Leaflet.js & Bootstrap -->
<link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
<script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://unpkg.com/leaflet-routing-machine/dist/leaflet-routing-machine.js"></script>

<script>
    // Initialize Map
    var map = L.map('map').setView([49.4431, 1.0993], 13);
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png').addTo(map);

    // Custom red marker for user location
    var userLocationIcon = L.icon({
        iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-red.png',
        iconSize: [25, 41],
        iconAnchor: [12, 41],
        popupAnchor: [1, -34]
    });

    var userLocationMarker = null; // Placeholder for user's marker
    var routeControl = null; // Placeholder for the route control

    // "Ma Position" Button Click Event
    document.getElementById('find-me-btn').addEventListener('click', function () {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(
                function (position) {
                    var lat = position.coords.latitude;
                    var lng = position.coords.longitude;

                    if (userLocationMarker) {
                        userLocationMarker.setLatLng([lat, lng]).update();
                    } else {
                        userLocationMarker = L.marker([lat, lng], { icon: userLocationIcon })
                            .addTo(map)
                            .bindPopup("Vous √™tes ici")
                            .openPopup();
                    }

                    map.setView([lat, lng], 15);
                },
                function (error) {
                    alert("Erreur de g√©olocalisation : " + error.message);
                }
            );
        } else {
            alert("La g√©olocalisation n'est pas prise en charge par votre navigateur.");
        }
    });

    // Add Markers for Each Place
    var markers = [];
    {% for place in places %}
    var marker = L.marker([{{ place.latitude }}, {{ place.longitude }}])
        .addTo(map)
        .bindPopup(`
            <b>{{ place.name }}</b><br>{{ place.type }}<br>
            <button onclick="showRoute({{ place.latitude }}, {{ place.longitude }})" class="btn btn-sm btn-link">üó∫Ô∏è Calculer l'itin√©raire</button>
        `);
    markers.push(marker);
    {% endfor %}

    // Adjust map view to fit all markers if they exist
    if (markers.length > 0) {
        var group = new L.featureGroup(markers);
        map.fitBounds(group.getBounds());
    }

    // Function to calculate the route from user location to a selected service
    function showRoute(destinationLat, destinationLng) {
        if (routeControl) {
            map.removeControl(routeControl); // Remove any existing route
        }

        navigator.geolocation.getCurrentPosition(
            function (position) {
                var userLat = position.coords.latitude;
                var userLng = position.coords.longitude;

                routeControl = L.Routing.control({
                    waypoints: [
                        L.latLng(userLat, userLng),
                        L.latLng(destinationLat, destinationLng)
                    ],
                    routeWhileDragging: false,
                    show: true
                }).addTo(map);
            },
            function (error) {
                alert("Erreur de g√©olocalisation : " + error.message);
            }
        );
    }
</script>
{% endblock %}
